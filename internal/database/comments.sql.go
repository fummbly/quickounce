// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: comments.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createComment = `-- name: CreateComment :one
INSERT INTO comments (id, post_id, user_id, comment_text, created_at, updated_at)
VALUES(
	gen_random_uuid(),
	$1,
	$2,
	$3,
	NOW(),
	NOW()
)RETURNING id, comment_text, created_at, updated_at, post_id, user_id
`

type CreateCommentParams struct {
	PostID      uuid.UUID
	UserID      uuid.UUID
	CommentText string
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (Comment, error) {
	row := q.db.QueryRowContext(ctx, createComment, arg.PostID, arg.UserID, arg.CommentText)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.CommentText,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.PostID,
		&i.UserID,
	)
	return i, err
}

const getCommentsByPost = `-- name: GetCommentsByPost :many
SELECT id, comment_text, created_at, updated_at, post_id, user_id FROM comments
WHERE post_id = $1
`

func (q *Queries) GetCommentsByPost(ctx context.Context, postID uuid.UUID) ([]Comment, error) {
	rows, err := q.db.QueryContext(ctx, getCommentsByPost, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comment
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.CommentText,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.PostID,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
